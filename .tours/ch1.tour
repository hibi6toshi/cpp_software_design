{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "ch1",
  "steps": [
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid2/memo.md",
      "description": "「レガシーコード改善ガイド」からの出店のよう。",
      "line": 5
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid2/memo.md",
      "description": "pure指定子があるものは特に純粋仮装関数と呼ばれる。\nこれは、「派生クラスで必ずオーバーライドされるべき関数」を意味している。\n純粋仮想関数が宣言されたクラスを特に抽象クラスと呼ぶ。",
      "line": 28
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid2/memo.md",
      "description": "メモ：「本質的な振る舞いでないもの（DTOなり、アスペクトっぽいもの）は分離しろ」のように聞こえる。",
      "line": 87
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid3/memo.md",
      "description": "動的言語的にやるなら、必要な属性しか渡さない的なことになるのかなぁ",
      "line": 65
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid4/memo.md",
      "description": "なんとなくStrategyぽいことがしたい？",
      "line": 122
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid5/memo.md",
      "description": "同レベルでの依存（関係性）がなくなったので、関心が分離されたということが言いたいように聞こえる。",
      "line": 80
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid5/memo.md",
      "description": "OCPはアーキテクチャ上で同じレベルや、上位の既存コードで変更を発生させるべきではないとするものですが、下位での変更発生を妨げるものではありません。\n\nなるほど。\n「同じアーキテクチャレベルのものに変に依存するな」（そうしないと、ある変更が、他の同じアーキテクチャレベルのものに影響する可能性が生まれるから）という感じか",
      "line": 86
    },
    {
      "file": "ch1/1.ソフトウェア設計の重要性を理解する/guid5/memo.md",
      "description": "DDDのでインフラ層に置くのと似たような発想に見える。",
      "line": 87
    }
  ]
}